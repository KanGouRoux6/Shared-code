using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LemonUI;
using GTA.Math;
using System.Windows.Forms;
using GTA;
using GTA.Native;
using LemonUI.Menus;


namespace GangPed
{
public class Basics : Script
    {
        public class MyNewClass : NativeCheckboxItem
        {
            public int Switch { get; set; }
            public int Cswitch { get; set; }
            public int Machete { get; set; }
            public int Cmachete { get; set; }
            public int Pistol { get; set; }
            public int Ccpistol { get; set; }
            public int Pistol2 { get; set; }
            public int Cpistol2 { get; set; }
            public int Snspistol { get; set; }
            public int Csnspistol { get; set; }
            public int Sns2pistol { get; set; }
            public int Csns2pistol { get; set; }
            public int Cpistol { get; set; }
            public int Cccpistol { get; set; }
            public int Hpistol { get; set; }
            public int Chpistol { get; set; }
            public int Vpistol { get; set; }
            public int Cvpistol { get; set; }
            public int Rpistol2 { get; set; }
            public int Crpistol2 { get; set; }
            public int Mpistol { get; set; }
            public int Cmpistol { get; set; }
            public int Npistol { get; set; }
            public int Cnpistol { get; set; }
            public int Dpistol { get; set; }
            public int Cdpistol { get; set; }
            public int Rpistol { get; set; }
            public int Crpistol { get; set; }
            public int bcost { get; set; }
            public int bnum { get; set; }

            public MyNewClass(string title) : base(title) // we need to pass the arguments that the NativeCheckboxItem needs
            {
                MyNewClass newClass = (MyNewClass)Bswitch;
                if (newClass == null) // is not an instance of MyNewClass
                {return;}
                if (Bswitch.Checked) { Switch = 1; Cswitch = 1000; }
                else { Switch = 0; Cswitch = 0; }
                MyNewClass newClass1 = (MyNewClass)Bmachete;
                if (newClass1 == null) // is not an instance of MyNewClass
                { return; }
                if (Bmachete.Checked) { Machete = 1; Cmachete = 5000; }
                else { Machete = 0; Cmachete = 0; }
                MyNewClass newClass2 = (MyNewClass)Bpistol;
                if (newClass2 == null) // is not an instance of MyNewClass
                { return; }
                if (Bpistol.Checked) { Pistol = 1; Ccpistol = 5000; }
                else { Pistol = 0; Ccpistol = 0; }
                MyNewClass newClass3 = (MyNewClass)Bpistol2;
                if (newClass3 == null) // is not an instance of MyNewClass
                { return; }
                if (Bpistol2.Checked) { Pistol2 = 1; Cpistol2 = 12500; }
                else { Pistol2 = 0; Cpistol2 = 0; }
                MyNewClass newClass4 = (MyNewClass)Bsnspistol;
                if (newClass4 == null) // is not an instance of MyNewClass
                { return; }
                if (Bsnspistol.Checked) { Snspistol = 1; Csnspistol = 4000; }
                else { Snspistol = 0; Csnspistol = 0; }
                MyNewClass newClass5 = (MyNewClass)Bsns2pistol;
                if (newClass5 == null) // is not an instance of MyNewClass
                { return; }
                if (Bsns2pistol.Checked) { Sns2pistol = 1; Csns2pistol = 11000; }
                else { Sns2pistol = 0; Csns2pistol = 0; }
                MyNewClass newClass6 = (MyNewClass)Bcpistol;
                if (newClass6 == null) // is not an instance of MyNewClass
                { return; }
                if (Bcpistol.Checked) { Cpistol = 1; Cccpistol = 10000; }
                else { Cpistol = 0; Cccpistol = 0; }
                MyNewClass newClass7 = (MyNewClass)Bhpistol;
                if (newClass7 == null) // is not an instance of MyNewClass
                { return; }
                if (Bhpistol.Checked) { Hpistol = 1; Chpistol = 20000; }
                else { Hpistol = 0; Chpistol = 0; }
                MyNewClass newClass8 = (MyNewClass)Bvpistol;
                if (newClass8 == null) // is not an instance of MyNewClass
                { return; }
                if (Bvpistol.Checked) { Vpistol = 1; Cvpistol = 15000; }
                else { Vpistol = 0; Cvpistol = 0; }
                MyNewClass newClass9 = (MyNewClass)Brpistol2;
                if (newClass9 == null) // is not an instance of MyNewClass
                { return; }
                if (Brpistol2.Checked) { Rpistol2 = 1; Crpistol2 = 40000; }
                else { Rpistol2 = 0; Crpistol2 = 0; }
                MyNewClass newClass10 = (MyNewClass)Bmpistol;
                if (newClass10 == null) // is not an instance of MyNewClass
                { return; }
                if (Bmpistol.Checked) { Mpistol = 1; Cmpistol = 50000; }
                else { Mpistol = 0; Cmpistol = 0; }
                MyNewClass newClass11 = (MyNewClass)Bnpistol;
                if (newClass11 == null) // is not an instance of MyNewClass
                { return; }
                if (Bnpistol.Checked) { Npistol = 1; Cnpistol = 80000; }
                else { Npistol = 0; Cnpistol = 0; }
                MyNewClass newClass12 = (MyNewClass)Bdpistol;
                if (newClass12 == null) // is not an instance of MyNewClass
                { return; }
                if (Bdpistol.Checked) { Dpistol = 1; Cdpistol = 40000; }
                else { Dpistol = 0; Cdpistol = 0; }
                MyNewClass newClass13 = (MyNewClass)Brpistol;
                if (newClass13 == null) // is not an instance of MyNewClass
                { return; }
                if (Brpistol.Checked) { int Rpistol = 1; Crpistol = 40000; }
                else { int Rpistol = 0; Crpistol = 0; }
                MyNewClass newClass14 = (MyNewClass)Bvalid;
                if (newClass14 == null) // is not an instance of MyNewClass
                { return; }
                bcost = Cswitch + Cmachete + Ccpistol + Cpistol2 + Csnspistol + Csns2pistol + Cccpistol + Chpistol + Cvpistol + Crpistol + Crpistol2 + Cmpistol + Cnpistol + Cdpistol;
                bnum = Machete + Switch + Pistol + Pistol2 + Snspistol + Sns2pistol + Ccpistol + Hpistol + Vpistol + Rpistol + Rpistol2 + Mpistol + Dpistol + Npistol + Cpistol;
            }

        }



        private static readonly ObjectPool DemoPool = new ObjectPool();
        private static readonly NativeMenu DemoMenu = new NativeMenu("Turf's Gun Manager", " ", " ");

        //start of Submenu
        private static readonly NativeMenu TbuygunSubMenu = new NativeMenu("Buy Guns", "Buy Guns", "");  //The first submenu

#region CheckboxNativeItem
        private static readonly NativeCheckboxItem Bswitch = new NativeCheckboxItem("Switchblade", "1.000$");
        private static readonly NativeCheckboxItem Bmachete = new NativeCheckboxItem("Machete", "5.000$");
        private static readonly NativeCheckboxItem Bsnspistol = new NativeCheckboxItem("SNS Pistol", "4.000$");
        private static readonly NativeCheckboxItem Bsns2pistol = new NativeCheckboxItem("SNS Pistol MK2", "11.000$");
        private static readonly NativeCheckboxItem Bpistol = new NativeCheckboxItem("Pistol", "5.000$");
        private static readonly NativeCheckboxItem Bpistol2 = new NativeCheckboxItem("Pistol MK2", "12.500$");
        private static readonly NativeCheckboxItem Bcpistol = new NativeCheckboxItem("Combat Pistol", "10.000$");
        private static readonly NativeCheckboxItem Bvpistol = new NativeCheckboxItem("Vintage Pistol", "15.000$");
        private static readonly NativeCheckboxItem Bmpistol = new NativeCheckboxItem("Marksman Pistol", "50.000$");
        private static readonly NativeCheckboxItem Bhpistol = new NativeCheckboxItem("Heavy Pistol", "20.000$");
        private static readonly NativeCheckboxItem Brpistol = new NativeCheckboxItem("Heavy Revolver", "25.000$");
        private static readonly NativeCheckboxItem Brpistol2 = new NativeCheckboxItem("Heavy Revolver MK2", "40.000$");
        private static readonly NativeCheckboxItem Bnpistol = new NativeCheckboxItem("Navy Revolver", "80.000$");
        private static readonly NativeCheckboxItem Bdpistol = new NativeCheckboxItem("Deagle / .50 Pistol", "40.000$");
        #endregion

        private static readonly NativeItem Bvalid = new NativeItem("Order checked items", "");  //to pass the gun order
        


#region ItemData
#region ItemOrderedOrNot
        int Switch = 0;
        int Machete = 0;
        int Pistol = 0;
        int Cpistol = 0;
        int Snspistol = 0;
        int Hpistol = 0;
        int Dpistol = 0;
        int Vpistol = 0;
        int Sns2pistol = 0;
        int Pistol2 = 0;
        int Rpistol = 0;
        int Rpistol2 = 0;
        int Npistol = 0;
        int Mpistol = 0;
        #endregion
#region ItemCost
        int Cswitch = 0;
        int Cmachete = 0;
        int Ccpistol = 0;
        int Cccpistol = 0;
        int Csnspistol = 0;
        int Chpistol = 0;
        int Cdpistol = 0;
        int Cvpistol = 0;
        int Csns2pistol = 0;
        int Cpistol2 = 0;
        int Crpistol = 0;
        int Crpistol2 = 0;
        int Cnpistol = 0;
        int Cmpistol = 0;
        #endregion
#endregion

        int bnum = 0; //Used to count how much weapons are ordered
        int bcost = 0; //Used to calculate Final Cost

#region RandomCrateLocations
        Vector3 cposa = new Vector3(-56f, -1094f, 25.5f);
        Vector3 cposb = new Vector3(-56f, -1104f, 25.5f);
        #endregion
#region Anti-AmmuNation
        Vector3 ammu1 = new Vector3(16f, -1115f, 29.5f);
        Vector3 ammu11= new Vector3(0f, 0f, -20f);
        Vector3 ammu2 = new Vector3(811.9f, -2148.3f, 28.7f);
        Vector3 ammu22 = new Vector3(0f, 0f, 0f);
        Vector3 ammu3 = new Vector3(844F, -1024.7F, 27.2f);
        Vector3 ammu33 = new Vector3(0f, 0f, 0f);
        Vector3 ammu4 = new Vector3(-663.8F, -944.2F, 21.2f);
        Vector3 ammu44 = new Vector3(0f, 0f, 0f);
        Vector3 ammu5 = new Vector3(-1313.5F, -390F, 36f);
        Vector3 ammu55 = new Vector3(0f, 0f, 75f);
        Vector3 ammu6 = new Vector3(244.5F, -45F, 69.1f);
        Vector3 ammu66 = new Vector3(0f, 0f, 70f);
        Vector3 ammu7 = new Vector3(-3164.7F, 1082.5F, 20f);
        Vector3 ammu77 = new Vector3(0f, 0f, 67f);
        Vector3 ammu8 = new Vector3(2569.5F, 303F, 108f);
        Vector3 ammu88 = new Vector3(0f, 0f, 0f);
        Vector3 ammu9 = new Vector3(-1113F, 2690.8F, 17.8f);
        Vector3 ammu99 = new Vector3(0f, 0f, 40f);
        Vector3 ammu10 = new Vector3(1699F, 3752.6F, 34f);
        Vector3 ammu100 = new Vector3(0f, 0f, 48f);
        Vector3 ammu111 = new Vector3(-325.5f, 6076f, 30.7f);
        Vector3 ammu1110 = new Vector3(0f, 0f, 45f);
#endregion

        int Cspawn;
        int Cprox;
        int GameTimeReference = Game.GameTime + 1000;

                            //ScriptSettings Money; Stored for later
        Prop Crate;
        Prop wall1;    //all those ped are anti-ammunation system lol
        Prop wall2;
        Prop wall3;
        Prop wall4;
        Prop wall5;
        Prop wall6;
        Prop wall7;
        Prop wall8;
        Prop wall9;
        Prop wall10;
        Prop wall11;
        Blip Crates;
        

        public Basics()
        {

            //How you order items below doesn't matter
            DemoPool.Add(DemoMenu); // The pool is container for your menus, add the menu
            DemoPool.Add(TbuygunSubMenu); // add first submenu


            //Items for SubMenu Ped
            DemoMenu.AddSubMenu(TbuygunSubMenu);
            TbuygunSubMenu.Add(Bswitch); // item 1
            TbuygunSubMenu.Add(Bmachete); // item 2
            TbuygunSubMenu.Add(Bpistol);
            TbuygunSubMenu.Add(Bcpistol);
            TbuygunSubMenu.Add(Bsnspistol);
            TbuygunSubMenu.Add(Bhpistol);
            TbuygunSubMenu.Add(Bdpistol);
            TbuygunSubMenu.Add(Bvpistol);
            TbuygunSubMenu.Add(Bsns2pistol);
            TbuygunSubMenu.Add(Bpistol2);
            TbuygunSubMenu.Add(Brpistol);
            TbuygunSubMenu.Add(Brpistol2);
            TbuygunSubMenu.Add(Bmpistol);
            TbuygunSubMenu.Add(Bnpistol);
            TbuygunSubMenu.Add(Bvalid);

            //Peds, these are menus with submenu items

            Bvalid.Activated += BuyValid;

            Tick += onTick;
            KeyDown += onKeyDown;

            //Game.Player.ChangeModel(PedHash.FreemodeMale01);

            

        }



        #region onTick
        private void onTick(object sender, EventArgs e)
        {
            DemoPool.Process();
            if (Game.GameTime > GameTimeReference)
            {
                GameTimeReference = Game.GameTime + 1000;

                if (World.GetDistance(Game.Player.Character.Position, ammu1) <= 25f)
                { wall1 = World.CreateProp(889860172, ammu1, ammu11, true, true); }

                if (World.GetDistance(Game.Player.Character.Position, ammu2) <= 25f)
                { wall2 = World.CreateProp(889860172, ammu2, ammu22, true, true); }

                if (World.GetDistance(Game.Player.Character.Position, ammu3) <= 25f)
                { wall3 = World.CreateProp(889860172, ammu3, ammu33, true, true); }

                if (World.GetDistance(Game.Player.Character.Position, ammu4) <= 25f)
                { wall4 = World.CreateProp(889860172, ammu4, ammu44, true, true); }

                if (World.GetDistance(Game.Player.Character.Position, ammu5) <= 25f)
                { wall5 = World.CreateProp(889860172, ammu5, ammu55, true, true); }

                if (World.GetDistance(Game.Player.Character.Position, ammu6) <= 25f)
                { wall6 = World.CreateProp(889860172, ammu6, ammu66, true, true); }

                if (World.GetDistance(Game.Player.Character.Position, ammu7) <= 25f)
                { wall7 = World.CreateProp(889860172, ammu7, ammu77, true, true); }

                if (World.GetDistance(Game.Player.Character.Position, ammu8) <= 25f)
                { wall8 = World.CreateProp(889860172, ammu8, ammu88, true, true); }

                if (World.GetDistance(Game.Player.Character.Position, ammu9) <= 25f)
                { wall9 = World.CreateProp(889860172, ammu9, ammu99, true, true); }

                if (World.GetDistance(Game.Player.Character.Position, ammu10) <= 25f)
                { wall10 = World.CreateProp(889860172, ammu10, ammu100, true, true); }

                if (World.GetDistance(Game.Player.Character.Position, ammu111) <= 25f)
                { wall11 = World.CreateProp(889860172, ammu111, ammu1110, true, true); }

            }


        }
        #endregion
        #region BuyValid
        private void BuyValid(object sender, EventArgs e)
        {

            if (bnum == 0) {UI.Notify("You have to check what you want ordering"); }

            if (bnum >= 3) {UI.Notify("You can't order more than 2 weapon at the same time");}

            if (bnum <= 2)if(bnum > 0){
                if (bcost > Game.Player.Money){ UI.Notify("You need more money to do this"); }
                
                if (bcost < Game.Player.Money)
                {
                    Game.Player.Money -= bcost;
                    UI.Notify("Thanks man the ~r~Crate will land in 2 min");
                    Wait(12000);
                    Random rnd = new Random();
                    int Cspawn = rnd.Next(1, 3);
                    if (Cspawn == 1)
                    {
                        World.AddExplosion(cposa, ExplosionType.Flare, 2, 0);
                        Crate = World.CreateProp(481432069, cposa, true, true);
                        if (World.GetDistance(Game.Player.Character.Position, cposa) <= 3.0f)
                        {
                            UI.Notify("Press ~r~E to start opening the crate");
                            int Cprox = 1;
                        }
                    }
                    if (Cspawn == 2)
                    {
                        World.AddExplosion(cposb, ExplosionType.Flare, 2, 0);
                    }

                }
            }


            

        }

        #endregion
#region OnkeyDown
        private void onKeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.NumPad2) //put whatever key binding you want here
            { DemoMenu.Visible = true; }

            if (Cprox == 1)
            if (e.KeyCode == Keys.E)
            {
                Game.Player.Character.Weapons.Give(WeaponHash.AdvancedRifle, 0, false, false);
                Game.Player.CanControlCharacter = false;
                Wait(7000);
                Crate.Delete();
                Cprox = 0;
                Game.Player.CanControlCharacter = false;
            }
        }
        #endregion
    }
}
